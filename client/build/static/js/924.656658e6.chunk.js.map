{"version":3,"file":"static/js/924.656658e6.chunk.js","mappings":"2MAwCA,UA/BuB,YACJA,EAAAA,EAAAA,OAISC,EAAAA,EAAAA,UAuB1B,OAAO,uBACR,C,uDCtCKC,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,EAAAA,CAsBH,OAtBGA,EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,CAAAA,CAAAA,IAAAA,UAAAA,MACJ,SAAeC,GACb,OAAOA,EAAMC,QAAU,CACxB,wBACD,SAAeD,GAEb,MADiB,gDACCE,KAAKF,EACxB,yBACD,SAAgBA,GAEd,MADkB,gDACCE,KAAKF,EACzB,wBAED,SAAeA,GACb,OACE,cACEG,GAAG,oBACHC,UAAU,8CAFZ,SAIGJ,GAGN,OAtBGD,GAyBN,K","sources":["components/User/ChangePassword.jsx","helper/FormValidation.js"],"sourcesContent":["//External Lib Import\r\nimport { useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport UserRequest from \"../../APIRequest/UserRequest\";\r\n\r\n//Internal Lib Import\r\nimport FormValidation from \"../../helper/FormValidation\";\r\nimport ToastMessage from \"../../helper/ToastMessage\";\r\n\r\nconst ChangePassword = () => {\r\n  const navigate = useNavigate();\r\n\r\n  let previousPasswordRef,\r\n    newPasswordRef,\r\n    confirmNewPasswordRef = useRef();\r\n\r\n  const updatePassword = () => {\r\n    if (FormValidation.isEmpty(previousPasswordRef.value)) {\r\n      ToastMessage.errorMessage(\"Previous Password is Required\");\r\n    } else if (FormValidation.isEmpty(newPasswordRef.value)) {\r\n      ToastMessage.errorMessage(\"New Password is Required\");\r\n    } else if (FormValidation.isEmpty(confirmNewPasswordRef.value)) {\r\n      ToastMessage.errorMessage(\"Confirm Password is Required\");\r\n    } else if (newPasswordRef.value !== confirmNewPasswordRef.value) {\r\n      ToastMessage.errorMessage(\"New & Confirm Password Not Match\");\r\n    } else {\r\n      UserRequest.UserChangePassword({\r\n        PreviousPassword: previousPasswordRef.value,\r\n        NewPassword: newPasswordRef.value,\r\n      }).then((result) => {\r\n        if (result) {\r\n          navigate(\"/\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default ChangePassword;\r\n","class FormValidation {\r\n  static isEmpty(value) {\r\n    return value.length <= 0;\r\n  }\r\n  static isEmail(value) {\r\n    let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    return regexEmail.test(value);\r\n  }\r\n  static isMobile(value) {\r\n    let regexMobile = /(^(\\+88|0088|88)?(01){1}[3456789]{1}(\\d){8})$/;\r\n    return regexMobile.test(value);\r\n  }\r\n\r\n  static isError(value) {\r\n    return (\r\n      <p\r\n        id=\"filled_error_help\"\r\n        className=\"mt-2 text-md text-red-600 dark:text-red-400\"\r\n      >\r\n        {value}\r\n      </p>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormValidation;\r\n"],"names":["useNavigate","useRef","FormValidation","value","length","test","id","className"],"sourceRoot":""}